{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "0.0.0.3",
  "parameters": {
    "acrResourceGroupName": {
      "type": "string"
    },
    "acrName": {
      "type": "string"
    },
    "deliveryIdName": {
      "metadata": {
        "description": "Name of the delivery managed identity"
      },
      "type": "string"
    },
    "droneSchedulerIdName": {
      "metadata": {
        "description": "Name of the drone scheduler managed identity"
      },
      "type": "string"
    },
    "workflowIdName": {
      "metadata": {
        "description": "Name of the workflow managed identity"
      },
      "type": "string"
    },
    "ingestionIdName": {
      "metadata": {
        "description": "Name of the ingestion managed identity"
      },
      "type": "string"
    },
    "packageIdName": {
      "metadata": {
        "description": "Name of the package managed identity"
      },
      "type": "string"
    },
    "sshRSAPublicKey": {
      "type": "string",
      "metadata": {
        "description": "Configure all linux machines with the SSH RSA public key string.  Your key should include three parts, for example 'ssh-rsa AAAAB...snip...UcyupgH azureuser@linuxvm'"
      }
    },
    "servicePrincipalClientId": {
        "metadata": {
            "description": "Client ID (used by cloudprovider)"
        },
        "type": "string"
    },
    "servicePrincipalClientSecret": {
        "metadata": {
            "description": "The Service Principal Client Secret."
        },
        "type": "securestring"
    },
    "osType": {
      "type": "string",
      "defaultValue": "Linux",
      "allowedValues": ["Linux"],
      "metadata": {
        "description": "The type of operating system."
      }
    },
    "osDiskSizeGB": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Disk size (in GB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
      },
      "minValue": 0,
      "maxValue": 1023
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for the Linux Virtual Machines."
      },
      "defaultValue": "azureuser"
    },
    "kubernetesVersion": {
      "type": "string",
      "metadata": {
        "description": "The version of Kubernetes. It must be supported in the target location."
      }
    },
    "deliveryRedisStorageType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": ["Standard_LRS", "Standard_ZRS", "Standard_GRS"],
      "metadata": {
        "description": "Type of the storage account that will store Redis Cache."
      }
    }
  },
  "variables": {
    "clusterNamePrefix": "aks",
    "acrName": "[parameters('acrName')]",
    "managedIdentityOperatorRoleObjectId": "f1a07417-d97a-45cb-824c-7a7467783830",
    "managedIdentityOperatorRoleId": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/', variables('managedIdentityOperatorRoleObjectId'))]",
    "deliveryRedisStorageName": "[concat('rsto',uniqueString(resourceGroup().id))]",
    "nestedACRDeploymentName": "[concat('azuredeploy-acr-',parameters('acrResourceGroupName'))]",
    "aksLogAnalyticsNamePrefix": "logsAnalytics",
    "monitoringMetricsPublisherRole": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/3913510d-42f4-4e42-8a64-420c390055eb')]",
    "acrPullRole": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
    "virtualMachineContributorRole": "[concat(subscription().Id, '/providers/Microsoft.Authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
    "nodeResourceGroupName": "[concat('rg-', variables('aksClusterName'), '-nodepools')]",
    "aksClusterName": "[uniqueString(variables('clusterNamePrefix'), resourceGroup().id)]",
    "deliveryRedisStorageId": "[resourceId('Microsoft.Storage/storageAccounts',variables('deliveryRedisStorageName'))]",
    "deliveryRedisCacheSKU": "Basic",
    "deliveryRedisCacheFamily": "C",
    "deliveryRedisCacheCapacity": 0,
    "deliveryCosmosDbName": "[concat('d-', uniqueString(resourceGroup().id))]",
    "deliveryRedisName": "[concat('d-',uniqueString(resourceGroup().id))]",
    "ingestionSBNamespace": "[concat('i-',uniqueString(resourceGroup().id))]",
    "ingestionSBName": "[concat('i-',uniqueString(resourceGroup().id))]",
    "ingestionServiceAccessKey": "IngestionServiceAccessKey",
    "workflowServiceAccessKey": "WorkflowServiceAccessKey",
    "agentCount": 2,
    "agentVMSize": "Standard_D2_v2",
    "workspaceName": "[concat('la-', uniqueString(variables('aksLogAnalyticsNamePrefix'), resourceGroup().id))]",
    "workspaceSku": "Free",
    "workspaceRetentionInDays": 7
  },
  "resources": [
    {
      "name": "[variables('nestedACRDeploymentName')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "resourceGroup": "[parameters('acrResourceGroupName')]",
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksClusterName'))]"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries/providers/roleAssignments",
              "apiVersion": "2018-09-01-preview",
              "name": "[concat(variables('acrName'), '/Microsoft.Authorization/', guid(concat(resourceGroup().id), variables('acrPullRole')))]",
              "dependsOn": [
              ],
              "properties": {
                "roleDefinitionId": "[variables('acrPullRole')]",
                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksClusterName')), '2020-03-01').identityProfile.kubeletidentity.objectId]",
                "principalType": "ServicePrincipal"
              }
            }
          ],
          "outputs": {
          }
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "name": "[variables('workspaceName')]",
      "apiVersion": "2020-08-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "retentionInDays": "[variables('workspaceRetentionInDays')]",
        "sku": {
          "Name": "[variables('workspaceSku')]"
        },
        "features": {
          "searchVersion": 1
        }
      }
    },
    {
      "name": "[variables('aksClusterName')]",
      "type": "Microsoft.ContainerService/managedClusters",
      "apiVersion": "2021-03-01",
      "location": "[resourceGroup().location]",
      "tags": {
        "environment": "shared cluster"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
      ],
      "properties": {
        "kubernetesVersion": "[parameters('kubernetesVersion')]",
        "nodeResourceGroup": "[variables('nodeResourceGroupName')]",
        "dnsPrefix": "[variables('aksClusterName')]",
        "agentPoolProfiles": [
          {
            "name": "agentpool",
            "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
            "count": "[variables('agentCount')]",
            "vmSize": "[variables('agentVMSize')]",
            "osType": "[parameters('osType')]",
            "storageProfile": "ManagedDisks",
            "mode": "System"
          }
        ],
        "linuxProfile": {
          "adminUsername": "[parameters('adminUsername')]",
          "ssh": {
            "publicKeys": [
              {
                "keyData": "[parameters('sshRSAPublicKey')]"
              }
            ]
          }
        },
        "servicePrincipalProfile": {
            "clientId": "[parameters('servicePrincipalClientId')]",
            "secret": "[parameters('servicePrincipalClientSecret')]"
        },
        "addonProfiles": {
          "omsagent": {
            "config": {
              "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]"
            },
            "enabled": true
          },
          "azureKeyvaultSecretsProvider": {
            "enabled": true,
            "config": {
                "enableSecretRotation": "false"
            }
          }
        }
      },
      "identity": {
        "type": "SystemAssigned"
      }
    },
    {
      "name": "[variables('deliveryRedisStorageName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "sku": {
        "name": "[parameters('deliveryRedisStorageType')]"
      },
      "kind": "Storage",
      "location": "[resourceGroup().location]",
      "comments": "This storage account is used by Delivery Redis",
      "tags": {
        "displayName": "Storage account for inflight deliveries",
        "app": "fabrikam-delivery"
      }
    },
    {
      "type": "Microsoft.ContainerService/managedClusters/providers/roleAssignments",
      "apiVersion": "2021-04-01-preview",
      "name": "[concat(variables('aksClusterName'), '/Microsoft.Authorization/', guid(concat(resourceGroup().id), variables('monitoringMetricsPublisherRole')))]",
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksClusterName'))]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('monitoringMetricsPublisherRole')]",
        "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksClusterName')), '2020-03-01').identityProfile.kubeletidentity.objectId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/providers/roleAssignments",
      "name": "[concat(parameters('deliveryIdName'), '/Microsoft.Authorization/', guid('msi-delivery', resourceGroup().id))]",
      "apiVersion": "2021-04-01-preview",
      "comments": "Grant the AKS cluster Managed Identity access to the delivery managed id",
      "properties": {
        "roleDefinitionId": "[variables('managedIdentityOperatorRoleId')]",
        "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksClusterName')), '2020-03-01').identityProfile.kubeletidentity.objectId]",
        "principalType": "ServicePrincipal",
        "scope": "[concat(subscription().id, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/',parameters('deliveryIdName'))]"
      }
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/providers/roleAssignments",
      "name": "[concat(parameters('workflowIdName'), '/Microsoft.Authorization/', guid('msi-workflow', resourceGroup().id))]",
      "apiVersion": "2021-04-01-preview",
      "comments": "Grant the AKS cluster Managed Identity access to the workflow managed id",
      "properties": {
        "roleDefinitionId": "[variables('managedIdentityOperatorRoleId')]",
        "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksClusterName')), '2020-03-01').identityProfile.kubeletidentity.objectId]",
        "principalType": "ServicePrincipal",
        "scope": "[concat(subscription().id, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/',parameters('workflowIdName'))]"
      }
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/providers/roleAssignments",
      "name": "[concat(parameters('droneSchedulerIdName'), '/Microsoft.Authorization/', guid('msi-dronescheduler', resourceGroup().id))]",
      "apiVersion": "2021-04-01-preview",
      "comments": "Grant the AKS cluster Managed Identity access to the drone scheduler managed id",
      "properties": {
        "roleDefinitionId": "[variables('managedIdentityOperatorRoleId')]",
        "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksClusterName')), '2020-03-01').identityProfile.kubeletidentity.objectId]",
        "principalType": "ServicePrincipal",
        "scope": "[concat(subscription().id, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.ManagedIdentity/userAssignedIdentities/',parameters('droneSchedulerIdName'))]"
      }
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/providers/roleAssignments",
      "name": "[concat(parameters('ingestionIdName'), '/Microsoft.Authorization/', guid('msi-ingestion', resourceGroup().id))]",
      "apiVersion": "2021-04-01-preview",
      "comments": "Grant the AKS cluster Managed Identity access to the ingestion managed id",
      "properties": {
        "roleDefinitionId": "[variables('managedIdentityOperatorRoleId')]",
        "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksClusterName')), '2020-03-01').identityProfile.kubeletidentity.objectId]",
        "principalType": "ServicePrincipal",
        "scope": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('ingestionIdName'))]"
      }
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/providers/roleAssignments",
      "name": "[concat(parameters('packageIdName'), '/Microsoft.Authorization/', guid('msi-package', resourceGroup().id))]",
      "apiVersion": "2021-04-01-preview",
      "comments": "Grant the AKS cluster Managed Identity access to the package managed id",
      "properties": {
        "roleDefinitionId": "[variables('managedIdentityOperatorRoleId')]",
        "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksClusterName')), '2020-03-01').identityProfile.kubeletidentity.objectId]",
        "principalType": "ServicePrincipal",
        "scope": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('packageIdName'))]"
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "name": "EnsureClusterUserAssignedHasRbacToManageVMSS",
      "apiVersion": "2020-10-01",
      "dependsOn": [
        "[resourceId('Microsoft.ContainerService/managedClusters', variables('aksClusterName'))]"
      ],
      "resourceGroup": "[variables('nodeResourceGroupName')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "name": "[guid(resourceGroup().id)]",
              "apiVersion": "2021-04-01-preview",
              "comments": "It is required to grant the AKS cluster with Virtual Machine Contributor role permissions over the cluster infrastructure resource group to work with Managed Identities and aad-pod-identity. Otherwise MIC component fails while attempting to update MSI on VMSS cluster nodes",
              "properties": {
                "roleDefinitionId": "[variables('virtualMachineContributorRole')]",
                "principalId": "[reference(resourceId('Microsoft.ContainerService/managedClusters', variables('aksClusterName')), '2020-03-01').identityProfile.kubeletidentity.objectId]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      }
    }
  ],
  "outputs": {
    "aksClusterName": {
      "value": "[variables('aksClusterName')]",
      "type": "string"
    },
    "acrDeploymentName": {
      "value": "[variables('nestedACRDeploymentName')]",
      "type": "string"
    },
    "deliveryPrincipalResourceId": {
      "value": "[concat(subscription().id, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.ManagedIdentity/userAssignedIdentities/',parameters('deliveryIdName'))]",
      "type": "string"
    },
    "workflowPrincipalResourceId": {
      "value": "[concat(subscription().id, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.ManagedIdentity/userAssignedIdentities/',parameters('workflowIdName'))]",
      "type": "string"
    },
    "ingestionPrincipalResourceId": {
      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('ingestionIdName'))]",
      "type": "string"
    },
    "packagePrincipalResourceId": {
      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('packageIdName'))]",
      "type": "string"
    },
    "droneSchedulerPrincipalResourceId": {
      "value": "[concat(subscription().id, '/resourceGroups/',resourceGroup().name,'/providers/Microsoft.ManagedIdentity/userAssignedIdentities/',parameters('droneSchedulerIdName'))]",
      "type": "string"
     }
  }
}
