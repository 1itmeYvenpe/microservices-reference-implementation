{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "dnsNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "Sets the Domain name prefix for the cluster.  The concatenation of the domain name and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address."
      }
    },
    "agentCount": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100 (note, for Kubernetes clusters you will also get 1 or 2 public agents in addition to these seleted masters)"
      },
      "minValue":1,
      "maxValue":100
    },
    "agentVMSize": {
      "type": "string",
      "defaultValue": "Standard_D2_v2",
      "metadata": {
        "description": "The size of the Virtual Machine."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "User name for the Linux Virtual Machines."
      },
      "defaultValue" : "azureuser"
    },
    "orchestratorType": {
      "type": "string",
      "defaultValue": "Kubernetes",
      "allowedValues": [
        "Kubernetes",
        "DCOS",
        "Swarm"
      ],
      "metadata": {
        "description": "The type of orchestrator used to manage the applications on the cluster."
      }
    },
    "masterCount": {
      "type": "int",
      "defaultValue": 1,
      "allowedValues": [
        1
      ],
      "metadata": {
        "description": "The number of Kubernetes masters for the cluster."
      }
    },
    "sshRSAPublicKey": {
      "type": "string",
      "metadata": {
        "description": "Configure all linux machines with the SSH RSA public key string.  Your key should include three parts, for example 'ssh-rsa AAAAB...snip...UcyupgH azureuser@linuxvm'"
      }
    },
    "servicePrincipalClientId": {
      "metadata": {
        "description": "Client ID (used by cloudprovider)"
      },
      "type": "securestring"
    },
    "servicePrincipalClientSecret": {
      "metadata": {
        "description": "The Service Principal Client Secret."
      },
      "type": "securestring"
    },
    "acrName": {
      "type": "string",
      "minLength": 5,
      "maxLength": 50,
      "metadata": {
        "description": "Name of your Azure Container Registry"
      }
    },
    "acrAdminUserEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable admin user that have push / pull permission to the registry."
      }
    },
    "acrStorageType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_ZRS",
        "Standard_GRS"
      ],
      "metadata": {
        "description": "Type of the storage account that will store container registry datas."
      }
    },
    "deliveryRedisStorageType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_ZRS",
        "Standard_GRS"
      ],
      "metadata": {
        "description": "Type of the storage account that will store Redis Cache."
      }
    },
    "delivery_redisCacheSKU": {
      "type": "string",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ],
      "defaultValue": "Premium",
      "metadata": {
        "description": "The pricing tier of the new Azure Redis Cache."
      }
    },
    "delivery_redisCacheFamily": {
      "type": "string",
      "defaultValue": "P",
      "metadata": {
        "description": "The family for the sku."
      },
      "allowedValues": [
        "C",
        "P"
      ]
    },
    "delivery_redisCacheCapacity": {
      "type": "int",
      "allowedValues": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "defaultValue": 1,
      "metadata": {
        "description": "The size of the new Azure Redis Cache instance. "
      }
    },
    "delivery_redisEnableNonSslPort": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "A boolean value that indicates whether to allow access via non-SSL ports."
      }
    },
    "delivery_redisDiagnosticsEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "A value that indicates whether diagnostics should be saved to the specified storage account."
      }
    }
  },
  "variables": {
    "agentsEndpointDNSNamePrefix":"[concat(parameters('dnsNamePrefix'),'agents')]",
    "mastersEndpointDNSNamePrefix":"[concat(parameters('dnsNamePrefix'),'mgmt')]",
    "useServicePrincipalDictionary": {
      "DCOS": 0,
      "Swarm": 0,
      "Kubernetes": 1
    },
    "useServicePrincipal": "[variables('useServicePrincipalDictionary')[parameters('orchestratorType')]]",
    "servicePrincipalFields": [
      null,
      {
        "ClientId": "[parameters('servicePrincipalClientId')]",
        "Secret": "[parameters('servicePrincipalClientSecret')]"
      }
    ],
    "acrStorageName": "[concat('acr', uniqueString(resourceGroup().id))]",
    "acrStorageId": "[resourceId('Microsoft.Storage/storageAccounts', variables('acrStorageName'))]",
    "deliveryRedisStorageName": "[concat('red', uniqueString(resourceGroup().id))]",
    "deliveryRedisStorageId": "[resourceId('Microsoft.Storage/storageAccounts', variables('deliveryRedisStorageName'))]",
    "deliveryCosmosDbName": "[concat(parameters('dnsNamePrefix'),'-delivery-service-cosmosdb')]",
    "deliveryRedisName": "[concat(parameters('dnsNamePrefix'),'-delivery-service-redis')]",
    "packageMongoDbName": "[concat(parameters('dnsNamePrefix'),'-package-service-cosmosdb')]",
    "ingestionEHNamespace": "[concat(parameters('dnsNamePrefix'),'ingehns')]",
    "ingestionEHName": "[concat(parameters('dnsNamePrefix'),'ingeh')]",
    "ingestionEHConsumerGroupName": "[concat(parameters('dnsNamePrefix'),'ingehcg')]"
  },
  "resources": [
    {
      "apiVersion": "2016-09-30",
      "type": "Microsoft.ContainerService/containerServices",
      "location": "[resourceGroup().location]",
      "name":"[concat('containerservice-',resourceGroup().name)]",
      "properties": {
        "orchestratorProfile": {
          "orchestratorType": "[parameters('orchestratorType')]"
        },
        "masterProfile": {
          "count": "[parameters('masterCount')]",
          "dnsPrefix": "[variables('mastersEndpointDNSNamePrefix')]"
        },
        "agentPoolProfiles": [
          {
            "name": "agentpools",
            "count": "[parameters('agentCount')]",
            "vmSize": "[parameters('agentVMSize')]",
            "dnsPrefix": "[variables('agentsEndpointDNSNamePrefix')]"
          }
        ],
        "linuxProfile": {
          "adminUsername": "[parameters('adminUsername')]",
          "ssh": {
            "publicKeys": [
              {
                "keyData": "[parameters('sshRSAPublicKey')]"
              }
            ]
          }
        },
        "servicePrincipalProfile": "[variables('servicePrincipalFields')[variables('useServicePrincipal')]]"
      }
    },
    {
      "name": "[variables('acrStorageName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "comments": "This storage account is used by Container Registry for storing its datas.",
      "dependsOn": [],
      "tags": {
        "displayName": "ACR Image's storage",
        "container.registry": "[parameters('acrName')]"
      },
      "properties": {
        "accountType": "[parameters('acrStorageType')]"
      }
    },
    {
      "name": "[parameters('acrName')]",
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2016-06-27-preview",
      "location": "[resourceGroup().location]",
      "comments": "Container registry for storing docker images",
      "dependsOn": [
        "[variables('acrStorageId')]"
      ],
      "tags": {
        "displayName": "Container Registry",
        "container.registry": "[parameters('acrName')]"
      },
      "properties": {
        "adminUserEnabled": "[parameters('acrAdminUserEnabled')]",
        "storageAccount": {
          "accessKey": "[listKeys(variables('acrStorageId'),'2015-06-15').key1]",
          "name": "[variables('acrStorageName')]"
        }
      }
    },
    {
      "name": "[variables('deliveryRedisStorageName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "comments": "This storage account is used by Delivery Redis",
      "dependsOn": [],
      "tags": {
        "displayName": "Delivery Redis storage"
      },
      "properties": {
        "accountType": "[parameters('deliveryRedisStorageType')]"
      }
    },
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('deliveryRedisName')]",
      "type": "Microsoft.Cache/Redis",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('deliveryRedisStorageId')]"
      ],
      "properties": {
        "redisEnableNonSslPort": "[parameters('delivery_redisEnableNonSslPort')]",
        "sku": {
          "capacity": "[parameters('delivery_redisCacheCapacity')]",
          "family": "[parameters('delivery_redisCacheFamily')]",
          "name": "[parameters('delivery_redisCacheSKU')]"
        },
        "vm-size": "P4"
      },
      "resources": [
        {
          "apiVersion": "2017-05-01-preview",
          "type": "Microsoft.Cache/redis/providers/diagnosticsettings",
          "name": "[concat(variables('deliveryRedisName'), '/Microsoft.Insights/', variables('deliveryRedisName'))]",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[concat('Microsoft.Cache/Redis/', variables('deliveryRedisName'))]"
          ],
          "properties": {
            "storageAccountId": "[variables('deliveryRedisStorageId')]",
            "logs": [],
            "metrics": [
              {
                "timeGrain": "AllMetrics",
                "enabled": "[parameters('delivery_redisDiagnosticsEnabled')]",
                "retentionPolicy": {
                  "days": 90,
                  "enabled": "[parameters('delivery_redisDiagnosticsEnabled')]"
                }
              }
            ]
          }
        }
      ]
    },
    {
      "apiVersion": "2015-04-08",
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "name": "[variables('deliveryCosmosDbName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "name": "[variables('deliveryCosmosDbName')]",
        "databaseAccountOfferType": "['Standard']",
        "locations": [
          {
            "locationName": "[resourceGroup().location]",
            "failoverPriority": 0
          }
        ]
      }
    },
    {
      "apiVersion": "2015-04-08",
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "kind": "MongoDB",
      "name": "[variables('packageMongoDbName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "databaseAccountOfferType": "Standard",
        "name": "[variables('packageMongoDbName')]"
      }
    },
    {
      "apiVersion":"2017-04-01",
      "name":"[variables('ingestionEHNamespace')]",
      "type":"Microsoft.EventHub/Namespaces",
      "location":"[resourceGroup().location]",
      "sku":{
         "name":"Standard"
      },
      "properties": {
         "isAutoInflateEnabled": "true",
         "maximumThroughputUnits": "20"
         },
      "resources":[
         {
            "apiVersion":"2017-04-01",
            "name":"[variables('ingestionEHName')]",
            "type":"EventHubs",
            "dependsOn":[
               "[concat('Microsoft.EventHub/namespaces/', variables('ingestionEHNamespace'))]"
            ],
            "properties":{
               "messageRetentionInDays": "7",
               "partitionCount": "4"
            },
            "resources":[
               {
                  "apiVersion":"2017-04-01",
                  "name":"[variables('ingestionEHConsumerGroupName')]",
                  "type":"ConsumerGroups",
                  "dependsOn":[
                     "[variables('ingestionEHName')]"
                  ],
                  "properties":{
                  "userMetadata": "Consumer Group for ingestion Event Hub"
                  }
               }
            ]
         }
      ]
    }
  ],
  "outputs": {
    "masterFQDN": {
      "type": "string",
      "value": "[reference(concat('Microsoft.ContainerService/containerServices/', 'containerservice-', resourceGroup().name)).masterProfile.fqdn]"
    },
    "sshMaster0": {
      "type": "string",
      "value": "[concat('ssh ', parameters('adminUsername'), '@', reference(concat('Microsoft.ContainerService/containerServices/', 'containerservice-', resourceGroup().name)).masterProfile.fqdn, ' -A -p 22')]"
    },
    "agentFQDN": {
      "type": "string",
      "value": "[reference(concat('Microsoft.ContainerService/containerServices/', 'containerservice-', resourceGroup().name)).agentPoolProfiles[0].fqdn]"
    },
    "acrLoginServer": {
      "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries',parameters('acrName')),'2016-06-27-preview').loginServer]",
      "type": "string"
    }
  }
}
